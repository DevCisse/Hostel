// <auto-generated />
using System;
using Hostel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hostel.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210120081309_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Hostel.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdmissionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Lga")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Reservation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReservationCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomIdForUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Hostel.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockGender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BlockName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockGender = 1,
                            BlockName = "Block A"
                        },
                        new
                        {
                            Id = 2,
                            BlockGender = 1,
                            BlockName = "Block B"
                        },
                        new
                        {
                            Id = 3,
                            BlockGender = 0,
                            BlockName = "Block C"
                        },
                        new
                        {
                            Id = 4,
                            BlockGender = 0,
                            BlockName = "Block D"
                        });
                });

            modelBuilder.Entity("Hostel.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Occupied")
                        .HasMaxLength(30)
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Reserved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockId = 1,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 1"
                        },
                        new
                        {
                            Id = 2,
                            BlockId = 1,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 2"
                        },
                        new
                        {
                            Id = 3,
                            BlockId = 1,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 3"
                        },
                        new
                        {
                            Id = 4,
                            BlockId = 1,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 4"
                        },
                        new
                        {
                            Id = 5,
                            BlockId = 1,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 5"
                        },
                        new
                        {
                            Id = 6,
                            BlockId = 1,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 6"
                        },
                        new
                        {
                            Id = 7,
                            BlockId = 1,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 7"
                        },
                        new
                        {
                            Id = 8,
                            BlockId = 1,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 8"
                        },
                        new
                        {
                            Id = 9,
                            BlockId = 2,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 1"
                        },
                        new
                        {
                            Id = 10,
                            BlockId = 2,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 2"
                        },
                        new
                        {
                            Id = 11,
                            BlockId = 2,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 3"
                        },
                        new
                        {
                            Id = 12,
                            BlockId = 2,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 4"
                        },
                        new
                        {
                            Id = 13,
                            BlockId = 2,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 5"
                        },
                        new
                        {
                            Id = 14,
                            BlockId = 2,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 6"
                        },
                        new
                        {
                            Id = 15,
                            BlockId = 2,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 7"
                        },
                        new
                        {
                            Id = 16,
                            BlockId = 2,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 8"
                        },
                        new
                        {
                            Id = 17,
                            BlockId = 3,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 1"
                        },
                        new
                        {
                            Id = 18,
                            BlockId = 3,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 2"
                        },
                        new
                        {
                            Id = 19,
                            BlockId = 3,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 3"
                        },
                        new
                        {
                            Id = 20,
                            BlockId = 3,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 4"
                        },
                        new
                        {
                            Id = 21,
                            BlockId = 3,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 5"
                        },
                        new
                        {
                            Id = 22,
                            BlockId = 3,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 6"
                        },
                        new
                        {
                            Id = 23,
                            BlockId = 3,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 7"
                        },
                        new
                        {
                            Id = 24,
                            BlockId = 3,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 8"
                        },
                        new
                        {
                            Id = 25,
                            BlockId = 4,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 1"
                        },
                        new
                        {
                            Id = 26,
                            BlockId = 4,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 2"
                        },
                        new
                        {
                            Id = 27,
                            BlockId = 4,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 3"
                        },
                        new
                        {
                            Id = 28,
                            BlockId = 4,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 4"
                        },
                        new
                        {
                            Id = 29,
                            BlockId = 4,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 5"
                        },
                        new
                        {
                            Id = 30,
                            BlockId = 4,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 6"
                        },
                        new
                        {
                            Id = 31,
                            BlockId = 4,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 7"
                        },
                        new
                        {
                            Id = 32,
                            BlockId = 4,
                            Occupied = false,
                            Reserved = false,
                            RoomName = "Room 8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Hostel.Models.Room", b =>
                {
                    b.HasOne("Hostel.Models.Block", "Block")
                        .WithMany("Rooms")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hostel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hostel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hostel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hostel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hostel.Models.Block", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
